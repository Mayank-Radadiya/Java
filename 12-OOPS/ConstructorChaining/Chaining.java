// ConstructorChaining.java
// ----------------------------------------------------------
// âœ… Detailed explanation and example of Constructor Chaining in Java

/*
ðŸ“˜ What is Constructor Chaining?
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Constructor chaining is the process of calling one constructor from another constructor
in the same class (using `this()`) or from the parent class (using `super()`).
It helps reuse initialization code and reduces redundancy.

ðŸ”¹ Two types:
â€¢ Within same class â†’ use `this()`
â€¢ From subclass to superclass â†’ use `super()`
*/

/*
ðŸ“Š this() vs super():
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
| Keyword    | Calls constructor from...                |
|------------|-------------------------------------------|
| this()     | Same class                               |
| super()    | Parent (super) class                     |
| When used? | First line in a constructor              |
*/

class Vehicle {
    Vehicle() {
        System.out.println("Vehicle constructor called");
    }

    Vehicle(String type) {
        System.out.println("Vehicle type: " + type);
    }
}

class Car extends Vehicle {
    Car() {
        this("Sedan"); // Calls parameterized constructor in same class
        System.out.println("Default Car constructor");
    }

    Car(String model) {
        super("Four-wheeler"); // Calls superclass constructor
        System.out.println("Car model: " + model);
    }
}

public class Chaining {
    public static void main(String[] args) {
        Car car1 = new Car();
    }
}

/*
 * âœ… Summary:
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * â€¢ Constructor chaining improves code reuse
 * â€¢ `this()` is used for same-class chaining
 * â€¢ `super()` is used to call superclass constructor
 * â€¢ Must be the first line inside constructor
 */
